#!/usr/bin/env python3
"""
Harvest Finish - Complete your day intelligently
Usage: finish [hours] [description]
"""

import json
import os
import sys
from datetime import datetime

def get_config():
    """Get configuration from user's home directory"""
    config_file = os.path.expanduser("~/.harvest/config.json")
    if os.path.exists(config_file):
        try:
            with open(config_file, 'r', encoding='utf-8') as f:
                return json.load(f)
        except:
            pass
    
    # Default configuration
    return {
        "daily_hours_target": 8.0,
        "daily_standup_hours": 0.25,
        "data_file": os.path.expanduser("~/.harvest/tasks.json"),
        "user_name": os.getenv("USER", "user"),
        "company": "",
        "timezone": "UTC"
    }

def load_tasks():
    """Load tasks from JSON file"""
    config = get_config()
    data_file = config.get("data_file", os.path.expanduser("~/.harvest/tasks.json"))
    
    # Ensure directory exists
    os.makedirs(os.path.dirname(data_file), exist_ok=True)
    
    if os.path.exists(data_file):
        try:
            with open(data_file, 'r', encoding='utf-8') as f:
                return json.load(f)
        except:
            pass
    return []

def save_tasks(tasks):
    """Save tasks to JSON file"""
    config = get_config()
    data_file = config.get("data_file", os.path.expanduser("~/.harvest/tasks.json"))
    
    # Ensure directory exists
    os.makedirs(os.path.dirname(data_file), exist_ok=True)
    
    with open(data_file, 'w', encoding='utf-8') as f:
        json.dump(tasks, f, indent=2, ensure_ascii=False)

def get_today_status():
    """Get today's status"""
    tasks = load_tasks()
    today = datetime.now().strftime("%Y-%m-%d")
    today_tasks = [t for t in tasks if t["date"] == today]
    config = get_config()
    target_hours = config.get("daily_hours_target", 8.0)
    total = sum(t["hours"] for t in today_tasks)
    remaining = target_hours - total
    
    return {
        "date": today,
        "tasks": today_tasks,
        "total": total,
        "remaining": remaining
    }

def add_finishing_task(hours, description=None):
    """Add a task to finish the day"""
    tasks = load_tasks()
    today = datetime.now().strftime("%Y-%m-%d")
    
    if not description:
        if hours <= 0.5:
            description = "Quick task"
        elif hours <= 1.0:
            description = "QA testing"
        elif hours <= 2.0:
            description = "Development task"
        else:
            description = "Major development task"
    
    task = {
        "id": len(tasks) + 1,
        "description": description,
        "hours": float(hours),
        "category": "general",
        "date": today,
        "created_at": datetime.now().isoformat()
    }
    
    tasks.append(task)
    save_tasks(tasks)
    
    print(f"‚úÖ Added: {description} ({hours}h)")
    return task

def show_status():
    """Show today's status"""
    status = get_today_status()
    
    config = get_config()
    target_hours = config.get("daily_hours_target", 8.0)
    print(f"\nüìÖ Today ({status['date']}): {status['total']:.2f}h / {target_hours:.1f}h")
    print(f"üìà Remaining: {status['remaining']:.2f}h")
    
    if status['tasks']:
        for task in status['tasks']:
            icon = get_category_icon(task.get('category', 'general'))
            print(f"  {icon} {task['description']} ({task['hours']}h)")
    
    # Progress bar
    progress = (status['total'] / target_hours) * 100
    bar_length = 20
    filled = int((progress / 100) * bar_length)
    bar = "‚ñà" * filled + "‚ñë" * (bar_length - filled)
    print(f"üìä [{bar}] {progress:.1f}%")

def get_category_icon(category):
    """Get icon for category"""
    icons = {
        "tech": "üíª",
        "meeting": "ü§ù", 
        "qa": "üß™",
        "doc": "üìö",
        "planning": "üìã",
        "research": "üîç",
        "review": "üëÄ",
        "deploy": "üöÄ",
        "daily": "üì¢",
        "general": "üìù"
    }
    return icons.get(category, "üìù")

def main():
    status = get_today_status()
    
    print("üéØ FINISHING THE DAY")
    print("="*30)
    
    if status['remaining'] <= 0:
        print("üéâ Day is already complete!")
        show_status()
        return
    
    print(f"Remaining: {status['remaining']:.2f}h")
    
    # If hours provided as argument
    if len(sys.argv) >= 2:
        try:
            hours = float(sys.argv[1])
            description = sys.argv[2] if len(sys.argv) > 2 else None
            
            if hours > status['remaining']:
                print(f"‚ö†Ô∏è Warning: {hours}h exceeds remaining time ({status['remaining']:.2f}h)")
                response = input("Continue anyway? (y/N): ").strip().lower()
                if response != 'y':
                    return
            
            add_finishing_task(hours, description)
            show_status()
            return
            
        except ValueError:
            print("‚ùå Invalid hours")
            return
    
    # Interactive mode
    print(f"\nOptions:")
    print("1. Quick task")
    print("2. Add specific task")
    print("3. Split into smaller tasks")
    print("4. Just finish here")
    
    choice = input("\nSelect option (1-4): ").strip()
    
    if choice == "1":
        # Quick task with remaining hours
        add_finishing_task(status['remaining'])
    elif choice == "2":
        # Add specific task
        description = input("Task description: ").strip()
        if not description:
            print("‚ùå Description required")
            return
        
        hours_input = input(f"Hours (max {status['remaining']:.2f}): ").strip()
        try:
            hours = float(hours_input)
            if hours > status['remaining']:
                print(f"‚ö†Ô∏è Hours exceed remaining time")
                return
            add_finishing_task(hours, description)
        except ValueError:
            print("‚ùå Invalid hours")
            return
    elif choice == "3":
        # Split into smaller tasks
        if status['remaining'] <= 1.0:
            add_finishing_task(status['remaining'])
        else:
            print(f"Split {status['remaining']:.2f}h into smaller tasks:")
            remaining = status['remaining']
            task_num = 1
            
            while remaining > 0:
                if remaining <= 0.5:
                    hours = remaining
                else:
                    hours_input = input(f"Task {task_num} hours (max {remaining:.2f}): ").strip()
                    try:
                        hours = float(hours_input)
                        if hours > remaining:
                            print(f"‚ö†Ô∏è Hours exceed remaining time")
                            continue
                    except ValueError:
                        print("‚ùå Invalid hours")
                        continue
                
                description = input(f"Task {task_num} description: ").strip()
                if description:
                    add_finishing_task(hours, description)
                    remaining -= hours
                    task_num += 1
                else:
                    print("‚ùå Description required")
    elif choice == "4":
        print("‚úÖ Day finished!")
    else:
        print("‚ùå Invalid option")
    
    show_status()

if __name__ == "__main__":
    main() 