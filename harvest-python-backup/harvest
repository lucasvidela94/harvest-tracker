#!/usr/bin/env python3
"""
Harvest CLI - Simple command line interface for task tracking
Usage: h <command> [args...]
"""

import json
import os
import sys
import subprocess
import tempfile
import shutil
from datetime import datetime
from urllib.request import urlopen, Request
from urllib.error import URLError

def get_config():
    """Get configuration from user's home directory"""
    config_file = os.path.expanduser("~/.harvest/config.json")
    if os.path.exists(config_file):
        try:
            with open(config_file, 'r', encoding='utf-8') as f:
                return json.load(f)
        except:
            pass
    
    # Default configuration
    return {
        "daily_hours_target": 8.0,
        "daily_standup_hours": 0.25,
        "data_file": os.path.expanduser("~/.harvest/tasks.json"),
        "user_name": os.getenv("USER", "user"),
        "company": "",
        "timezone": "UTC"
    }

def load_tasks():
    """Load tasks from JSON file"""
    config = get_config()
    data_file = config.get("data_file", os.path.expanduser("~/.harvest/tasks.json"))
    
    # Ensure directory exists
    os.makedirs(os.path.dirname(data_file), exist_ok=True)
    
    if os.path.exists(data_file):
        try:
            with open(data_file, 'r', encoding='utf-8') as f:
                return json.load(f)
        except:
            pass
    return []

def save_tasks(tasks):
    """Save tasks to JSON file"""
    config = get_config()
    data_file = config.get("data_file", os.path.expanduser("~/.harvest/tasks.json"))
    
    # Ensure directory exists
    os.makedirs(os.path.dirname(data_file), exist_ok=True)
    
    with open(data_file, 'w', encoding='utf-8') as f:
        json.dump(tasks, f, indent=2, ensure_ascii=False)

def add_task(description, hours, category="general"):
    """Add a task"""
    tasks = load_tasks()
    today = datetime.now().strftime("%Y-%m-%d")
    
    task = {
        "id": len(tasks) + 1,
        "description": description,
        "hours": float(hours),
        "category": category,
        "date": today,
        "created_at": datetime.now().isoformat()
    }
    
    tasks.append(task)
    save_tasks(tasks)
    
    # Show updated status
    show_status()
    
    return task

def show_status():
    """Show today's status"""
    tasks = load_tasks()
    today = datetime.now().strftime("%Y-%m-%d")
    today_tasks = [t for t in tasks if t["date"] == today]
    config = get_config()
    target_hours = config.get("daily_hours_target", 8.0)
    total = sum(t["hours"] for t in today_tasks)
    remaining = target_hours - total
    
    print(f"\n📅 Today ({today}): {total:.2f}h / {target_hours:.1f}h")
    print(f"📈 Remaining: {remaining:.2f}h")
    
    if today_tasks:
        for task in today_tasks:
            icon = get_category_icon(task.get('category', 'general'))
            print(f"  {icon} {task['description']} ({task['hours']}h)")
    
    # Progress bar
    progress = (total / target_hours) * 100
    bar_length = 20
    filled = int((progress / 100) * bar_length)
    bar = "█" * filled + "░" * (bar_length - filled)
    print(f"📊 [{bar}] {progress:.1f}%")

def get_category_icon(category):
    """Get icon for category"""
    icons = {
        "tech": "💻",
        "meeting": "🤝", 
        "qa": "🧪",
        "doc": "📚",
        "planning": "📋",
        "research": "🔍",
        "review": "👀",
        "deploy": "🚀",
        "daily": "📢",
        "general": "📝"
    }
    return icons.get(category, "📝")

def generate_report():
    """Generate report for Harvest"""
    tasks = load_tasks()
    today = datetime.now().strftime("%Y-%m-%d")
    today_tasks = [t for t in tasks if t["date"] == today]
    
    if not today_tasks:
        print("No tasks to report")
        return
    
    print("\n📋 HARVEST REPORT:")
    print("="*30)
    
    for task in today_tasks:
        print(f"{task['description']} - {task['hours']}h")
    
    total = sum(t["hours"] for t in today_tasks)
    print(f"\nTotal: {total}h")
    
    # Copy to clipboard
    try:
        import pyperclip
        report_text = ""
        for task in today_tasks:
            report_text += f"{task['description']} - {task['hours']}h\n"
        report_text += f"\nTotal: {total}h"
        pyperclip.copy(report_text)
        print("✅ Copied to clipboard!")
    except ImportError:
        pass

def validate_hours(hours_str):
    """Validate and convert hours input"""
    try:
        # Handle common text inputs
        hours_str = hours_str.lower().strip()
        
        # Handle "two hours", "1.5 hours", etc.
        if "hour" in hours_str:
            hours_str = hours_str.replace("hours", "").replace("hour", "").strip()
        
        # Handle "two", "three", etc.
        number_words = {
            "one": 1, "two": 2, "three": 3, "four": 4, "five": 5,
            "six": 6, "seven": 7, "eight": 8, "nine": 9, "ten": 10,
            "half": 0.5, "quarter": 0.25, "three quarters": 0.75
        }
        
        if hours_str in number_words:
            return number_words[hours_str]
        
        # Try to convert to float
        hours = float(hours_str)
        
        # Validate reasonable range
        if hours < 0 or hours > 12:
            print("⚠️ Warning: Hours should be between 0 and 12")
            return None
            
        return hours
        
    except ValueError:
        print(f"❌ Invalid hours: '{hours_str}'")
        print("💡 Examples: 2.5, 1, 0.75, 'two hours', 'half'")
        return None

def compare_versions(version1, version2):
    """Compare two version strings using semantic versioning"""
    def version_to_tuple(version):
        parts = version.split('.')
        # Ensure we have at least 3 parts (major.minor.patch)
        while len(parts) < 3:
            parts.append('0')
        return tuple(int(part) for part in parts[:3])
    
    v1_tuple = version_to_tuple(version1)
    v2_tuple = version_to_tuple(version2)
    
    if v1_tuple > v2_tuple:
        return 1  # version1 is newer
    elif v1_tuple < v2_tuple:
        return -1  # version2 is newer
    else:
        return 0  # versions are equal

def get_current_version():
    """Get current version from VERSION file"""
    try:
        script_dir = os.path.dirname(os.path.abspath(__file__))
        version_file = os.path.join(script_dir, "VERSION")
        if os.path.exists(version_file):
            with open(version_file, 'r') as f:
                return f.read().strip()
    except:
        pass
    return "1.0.0"  # Fallback version

def get_latest_version():
    """Get latest version from GitHub releases"""
    try:
        # GitHub API URL for releases
        url = "https://api.github.com/repos/lucasvidela94/harvest-tracker/releases/latest"
        headers = {'User-Agent': 'Harvest-CLI-Updater/1.0'}
        
        req = Request(url, headers=headers)
        with urlopen(req, timeout=10) as response:
            data = json.loads(response.read().decode())
            return data['tag_name'].lstrip('v')  # Remove 'v' prefix
    except URLError as e:
        error_msg = str(e)
        if "404" in error_msg:
            print("ℹ️  No releases found on GitHub yet.")
            print("💡 This is normal for new repositories or when no releases have been created.")
            return None
        else:
            print(f"⚠️  Could not check for updates: {e}")
            return None
    except (KeyError, json.JSONDecodeError) as e:
        print(f"⚠️  Could not parse update information: {e}")
        return None

def download_release(version):
    """Download the latest release from GitHub"""
    try:
        # Create temporary directory
        temp_dir = tempfile.mkdtemp()
        
        # Clone the repository
        repo_url = "https://github.com/lucasvidela94/harvest-tracker.git"
        print(f"📥 Downloading version {version}...")
        
        result = subprocess.run(
            ["git", "clone", "--depth", "1", "--branch", f"v{version}", repo_url, temp_dir],
            capture_output=True,
            text=True
        )
        
        if result.returncode != 0:
            print(f"❌ Failed to download: {result.stderr}")
            shutil.rmtree(temp_dir, ignore_errors=True)
            return None
            
        return temp_dir
        
    except Exception as e:
        print(f"❌ Download failed: {e}")
        return None

def backup_user_data():
    """Backup user data before upgrade"""
    try:
        data_dir = os.path.expanduser("~/.harvest")
        if not os.path.exists(data_dir):
            return None
            
        backup_dir = tempfile.mkdtemp(prefix="harvest_backup_")
        
        # Copy all files from data directory
        for item in os.listdir(data_dir):
            src = os.path.join(data_dir, item)
            dst = os.path.join(backup_dir, item)
            
            if os.path.isfile(src):
                shutil.copy2(src, dst)
            elif os.path.isdir(src):
                shutil.copytree(src, dst)
                
        print(f"💾 Backup created: {backup_dir}")
        return backup_dir
        
    except Exception as e:
        print(f"⚠️  Could not create backup: {e}")
        return None

def restore_user_data(backup_dir):
    """Restore user data after upgrade"""
    try:
        if not backup_dir or not os.path.exists(backup_dir):
            return False
            
        data_dir = os.path.expanduser("~/.harvest")
        os.makedirs(data_dir, exist_ok=True)
        
        # Copy all files from backup
        for item in os.listdir(backup_dir):
            src = os.path.join(backup_dir, item)
            dst = os.path.join(data_dir, item)
            
            if os.path.isfile(src):
                shutil.copy2(src, dst)
            elif os.path.isdir(src):
                if os.path.exists(dst):
                    shutil.rmtree(dst)
                shutil.copytree(src, dst)
                
        print("✅ User data restored")
        return True
        
    except Exception as e:
        print(f"❌ Failed to restore user data: {e}")
        return False

def perform_upgrade():
    """Perform the upgrade process"""
    print("🔄 Harvest CLI - Upgrade")
    print("=" * 30)
    
    # Get current version
    current_version = get_current_version()
    print(f"📋 Current version: {current_version}")
    
    # Check for latest version
    latest_version = get_latest_version()
    if not latest_version:
        print("❌ Could not check for updates. Please try again later.")
        return False
        
    print(f"🔍 Latest version: {latest_version}")
    
    # Compare versions
    comparison = compare_versions(current_version, latest_version)
    if comparison >= 0:
        print("✅ You are currently on the latest version")
        return True
    
    # Ask for confirmation
    print(f"\n🆕 New version available: {latest_version}")
    response = input("Do you want to upgrade? (y/N): ").strip().lower()
    if response not in ['y', 'yes']:
        print("❌ Upgrade cancelled")
        return False
    
    # Backup user data
    print("\n💾 Creating backup...")
    backup_dir = backup_user_data()
    
    try:
        # Download new version
        temp_dir = download_release(latest_version)
        if not temp_dir:
            return False
        
        # Get current script directory
        current_dir = os.path.dirname(os.path.abspath(__file__))
        
        # Copy new files (excluding .git directory)
        print("📁 Installing new version...")
        for item in os.listdir(temp_dir):
            if item == '.git':
                continue
                
            src = os.path.join(temp_dir, item)
            dst = os.path.join(current_dir, item)
            
            if os.path.isfile(src):
                shutil.copy2(src, dst)
                # Make scripts executable
                if item in ['harvest', 'finish', 'week', 'install.sh', 'uninstall.sh', 'release.sh']:
                    os.chmod(dst, 0o755)
            elif os.path.isdir(src):
                if os.path.exists(dst):
                    shutil.rmtree(dst)
                shutil.copytree(src, dst)
        
        # Restore user data
        if backup_dir:
            restore_user_data(backup_dir)
        
        # Clean up
        shutil.rmtree(temp_dir, ignore_errors=True)
        if backup_dir:
            shutil.rmtree(backup_dir, ignore_errors=True)
        
        print(f"\n🎉 Upgrade completed successfully!")
        print(f"📋 Version {latest_version} is now installed")
        print("💡 You may need to restart your terminal or run 'source ~/.zshrc'")
        
        return True
        
    except Exception as e:
        print(f"❌ Upgrade failed: {e}")
        
        # Try to restore from backup
        if backup_dir:
            print("🔄 Attempting to restore from backup...")
            restore_user_data(backup_dir)
        
        return False

def main():
    if len(sys.argv) < 2:
        print("🌾 Harvest CLI")
        print("Usage:")
        print("  harvest add <description> <hours> [category]")
        print("  harvest tech <description> <hours>")
        print("  harvest meeting <description> <hours>")
        print("  harvest qa <description> <hours>")
        print("  harvest daily")
        print("  harvest status")
        print("  harvest report")
        print("  harvest --upgrade")
        return
    
    command = sys.argv[1].lower()
    
    if command == "add" and len(sys.argv) >= 4:
        description = sys.argv[2]
        hours_str = sys.argv[3]
        hours = validate_hours(hours_str)
        if hours is None:
            return
        
        category = sys.argv[4] if len(sys.argv) > 4 else "general"
        add_task(description, hours, category)
    
    elif command == "tech" and len(sys.argv) >= 4:
        description = sys.argv[2]
        hours_str = sys.argv[3]
        hours = validate_hours(hours_str)
        if hours is None:
            return
        add_task(description, hours, "tech")
    
    elif command == "meeting" and len(sys.argv) >= 4:
        description = sys.argv[2]
        hours_str = sys.argv[3]
        hours = validate_hours(hours_str)
        if hours is None:
            return
        add_task(description, hours, "meeting")
    
    elif command == "qa" and len(sys.argv) >= 4:
        description = sys.argv[2]
        hours_str = sys.argv[3]
        hours = validate_hours(hours_str)
        if hours is None:
            return
        add_task(description, hours, "qa")
    
    elif command == "daily":
        config = get_config()
        daily_hours = config.get("daily_standup_hours", 0.25)
        add_task("Daily Standup", daily_hours, "daily")
    
    elif command == "status":
        show_status()
    
    elif command == "report":
        generate_report()
    
    elif command == "--upgrade":
        perform_upgrade()
    
    else:
        print("❌ Invalid command or missing arguments")
        print("Use 'harvest' for help")

if __name__ == "__main__":
    main() 