#!/usr/bin/env python3
"""
Harvest Week - Generate weekly reports
Usage: week [copy]
"""

import json
import os
import sys
from datetime import datetime, timedelta

def get_config():
    """Get configuration from user's home directory"""
    config_file = os.path.expanduser("~/.harvest/config.json")
    if os.path.exists(config_file):
        try:
            with open(config_file, 'r', encoding='utf-8') as f:
                return json.load(f)
        except:
            pass
    
    # Default configuration
    return {
        "daily_hours_target": 8.0,
        "daily_standup_hours": 0.25,
        "data_file": os.path.expanduser("~/.harvest/tasks.json"),
        "user_name": os.getenv("USER", "user"),
        "company": "",
        "timezone": "UTC"
    }

def load_tasks():
    """Load tasks from JSON file"""
    config = get_config()
    data_file = config.get("data_file", os.path.expanduser("~/.harvest/tasks.json"))
    
    # Ensure directory exists
    os.makedirs(os.path.dirname(data_file), exist_ok=True)
    
    if os.path.exists(data_file):
        try:
            with open(data_file, 'r', encoding='utf-8') as f:
                return json.load(f)
        except:
            pass
    return []

def generate_weekly_report(copy_to_clipboard=False):
    """Generate weekly report"""
    tasks = load_tasks()
    
    # Get current week dates
    today = datetime.now()
    start_of_week = today - timedelta(days=today.weekday())
    
    week_dates = []
    for i in range(7):
        date = start_of_week + timedelta(days=i)
        week_dates.append(date.strftime("%Y-%m-%d"))
    
    print("ðŸ“… WEEKLY REPORT")
    print("="*50)
    print(f"Week of {start_of_week.strftime('%Y-%m-%d')} to {today.strftime('%Y-%m-%d')}")
    print("="*50)
    
    total_week = 0
    report_text = f"Weekly Report: {start_of_week.strftime('%Y-%m-%d')} to {today.strftime('%Y-%m-%d')}\n\n"
    
    for date in week_dates:
        day_tasks = [t for t in tasks if t["date"] == date]
        if day_tasks:
            day_total = sum(t["hours"] for t in day_tasks)
            total_week += day_total
            
            # Format date for display
            day_name = datetime.strptime(date, "%Y-%m-%d").strftime("%A")
            print(f"\nðŸ“… {day_name} ({date}): {day_total}h")
            print("-" * 40)
            
            day_report = f"{day_name} ({date}):\n"
            for task in day_tasks:
                print(f"â€¢ {task['description']} - {task['hours']}h")
                day_report += f"{task['description']} - {task['hours']}h\n"
            
            day_report += f"Total: {day_total}h\n\n"
            report_text += day_report
    
    print("\n" + "="*50)
    print(f"ðŸ“Š WEEKLY TOTAL: {total_week}h")
    print(f"ðŸŽ¯ DAILY AVERAGE: {total_week/7:.2f}h")
    print("="*50)
    
    report_text += f"WEEKLY TOTAL: {total_week}h"
    
    if copy_to_clipboard:
        try:
            import pyperclip
            pyperclip.copy(report_text)
            print("\nâœ… Weekly report copied to clipboard!")
        except ImportError:
            print("\nðŸ’¡ Install 'pyperclip' for automatic copying")
    
    return report_text

def main():
    copy_to_clipboard = len(sys.argv) > 1 and sys.argv[1] == "copy"
    generate_weekly_report(copy_to_clipboard)

if __name__ == "__main__":
    main() 