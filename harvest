#!/usr/bin/env python3
"""
Harvest CLI - Simple command line interface for task tracking
Usage: h <command> [args...]
"""

import json
import os
import sys
from datetime import datetime

def get_config():
    """Get configuration from user's home directory"""
    config_file = os.path.expanduser("~/.harvest/config.json")
    if os.path.exists(config_file):
        try:
            with open(config_file, 'r', encoding='utf-8') as f:
                return json.load(f)
        except:
            pass
    
    # Default configuration
    return {
        "daily_hours_target": 8.0,
        "daily_standup_hours": 0.25,
        "data_file": os.path.expanduser("~/.harvest/tasks.json"),
        "user_name": os.getenv("USER", "user"),
        "company": "",
        "timezone": "UTC"
    }

def load_tasks():
    """Load tasks from JSON file"""
    config = get_config()
    data_file = config.get("data_file", os.path.expanduser("~/.harvest/tasks.json"))
    
    # Ensure directory exists
    os.makedirs(os.path.dirname(data_file), exist_ok=True)
    
    if os.path.exists(data_file):
        try:
            with open(data_file, 'r', encoding='utf-8') as f:
                return json.load(f)
        except:
            pass
    return []

def save_tasks(tasks):
    """Save tasks to JSON file"""
    config = get_config()
    data_file = config.get("data_file", os.path.expanduser("~/.harvest/tasks.json"))
    
    # Ensure directory exists
    os.makedirs(os.path.dirname(data_file), exist_ok=True)
    
    with open(data_file, 'w', encoding='utf-8') as f:
        json.dump(tasks, f, indent=2, ensure_ascii=False)

def add_task(description, hours, category="general"):
    """Add a task"""
    tasks = load_tasks()
    today = datetime.now().strftime("%Y-%m-%d")
    
    task = {
        "id": len(tasks) + 1,
        "description": description,
        "hours": float(hours),
        "category": category,
        "date": today,
        "created_at": datetime.now().isoformat()
    }
    
    tasks.append(task)
    save_tasks(tasks)
    
    # Show updated status
    show_status()
    
    return task

def show_status():
    """Show today's status"""
    tasks = load_tasks()
    today = datetime.now().strftime("%Y-%m-%d")
    today_tasks = [t for t in tasks if t["date"] == today]
    config = get_config()
    target_hours = config.get("daily_hours_target", 8.0)
    total = sum(t["hours"] for t in today_tasks)
    remaining = target_hours - total
    
    print(f"\n📅 Today ({today}): {total:.2f}h / {target_hours:.1f}h")
    print(f"📈 Remaining: {remaining:.2f}h")
    
    if today_tasks:
        for task in today_tasks:
            icon = get_category_icon(task.get('category', 'general'))
            print(f"  {icon} {task['description']} ({task['hours']}h)")
    
    # Progress bar
    progress = (total / target_hours) * 100
    bar_length = 20
    filled = int((progress / 100) * bar_length)
    bar = "█" * filled + "░" * (bar_length - filled)
    print(f"📊 [{bar}] {progress:.1f}%")

def get_category_icon(category):
    """Get icon for category"""
    icons = {
        "tech": "💻",
        "meeting": "🤝", 
        "qa": "🧪",
        "doc": "📚",
        "planning": "📋",
        "research": "🔍",
        "review": "👀",
        "deploy": "🚀",
        "daily": "📢",
        "general": "📝"
    }
    return icons.get(category, "📝")

def generate_report():
    """Generate report for Harvest"""
    tasks = load_tasks()
    today = datetime.now().strftime("%Y-%m-%d")
    today_tasks = [t for t in tasks if t["date"] == today]
    
    if not today_tasks:
        print("No tasks to report")
        return
    
    print("\n📋 HARVEST REPORT:")
    print("="*30)
    
    for task in today_tasks:
        print(f"{task['description']} - {task['hours']}h")
    
    total = sum(t["hours"] for t in today_tasks)
    print(f"\nTotal: {total}h")
    
    # Copy to clipboard
    try:
        import pyperclip
        report_text = ""
        for task in today_tasks:
            report_text += f"{task['description']} - {task['hours']}h\n"
        report_text += f"\nTotal: {total}h"
        pyperclip.copy(report_text)
        print("✅ Copied to clipboard!")
    except ImportError:
        pass

def validate_hours(hours_str):
    """Validate and convert hours input"""
    try:
        # Handle common text inputs
        hours_str = hours_str.lower().strip()
        
        # Handle "two hours", "1.5 hours", etc.
        if "hour" in hours_str:
            hours_str = hours_str.replace("hours", "").replace("hour", "").strip()
        
        # Handle "two", "three", etc.
        number_words = {
            "one": 1, "two": 2, "three": 3, "four": 4, "five": 5,
            "six": 6, "seven": 7, "eight": 8, "nine": 9, "ten": 10,
            "half": 0.5, "quarter": 0.25, "three quarters": 0.75
        }
        
        if hours_str in number_words:
            return number_words[hours_str]
        
        # Try to convert to float
        hours = float(hours_str)
        
        # Validate reasonable range
        if hours < 0 or hours > 12:
            print("⚠️ Warning: Hours should be between 0 and 12")
            return None
            
        return hours
        
    except ValueError:
        print(f"❌ Invalid hours: '{hours_str}'")
        print("💡 Examples: 2.5, 1, 0.75, 'two hours', 'half'")
        return None

def main():
    if len(sys.argv) < 2:
        print("🌾 Harvest CLI")
        print("Usage:")
        print("  harvest add <description> <hours> [category]")
        print("  harvest tech <description> <hours>")
        print("  harvest meeting <description> <hours>")
        print("  harvest qa <description> <hours>")
        print("  harvest daily")
        print("  harvest status")
        print("  harvest report")
        return
    
    command = sys.argv[1].lower()
    
    if command == "add" and len(sys.argv) >= 4:
        description = sys.argv[2]
        hours_str = sys.argv[3]
        hours = validate_hours(hours_str)
        if hours is None:
            return
        
        category = sys.argv[4] if len(sys.argv) > 4 else "general"
        add_task(description, hours, category)
    
    elif command == "tech" and len(sys.argv) >= 4:
        description = sys.argv[2]
        hours_str = sys.argv[3]
        hours = validate_hours(hours_str)
        if hours is None:
            return
        add_task(description, hours, "tech")
    
    elif command == "meeting" and len(sys.argv) >= 4:
        description = sys.argv[2]
        hours_str = sys.argv[3]
        hours = validate_hours(hours_str)
        if hours is None:
            return
        add_task(description, hours, "meeting")
    
    elif command == "qa" and len(sys.argv) >= 4:
        description = sys.argv[2]
        hours_str = sys.argv[3]
        hours = validate_hours(hours_str)
        if hours is None:
            return
        add_task(description, hours, "qa")
    
    elif command == "daily":
        config = get_config()
        daily_hours = config.get("daily_standup_hours", 0.25)
        add_task("Daily Standup", daily_hours, "daily")
    
    elif command == "status":
        show_status()
    
    elif command == "report":
        generate_report()
    
    else:
        print("❌ Invalid command or missing arguments")
        print("Use 'harvest' for help")

if __name__ == "__main__":
    main() 